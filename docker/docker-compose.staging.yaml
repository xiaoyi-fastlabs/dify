# File: https://github.com/Vonng/pigsty/blob/master/app/dify/docker-compose.yml
# Docs: https://pigsty.io/zh/blog/pg/dify-setup/
# Src:  https://github.com/langgenius/dify/blob/main/docker/docker-compose.yaml


services:

  #============================================================#
  # API service
  #============================================================#
  api:
    image: langgenius/dify-api:0.6.11
    restart: always
    environment:

      MODE: api                     # Startup mode, 'api' starts the API server.
      LOG_LEVEL: "${LOG_LEVEL}"     # The log level for the application. Supported values are `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`

      #======================#
      # Database Credentials #
      #======================#
      # A secret key that is used for securely signing the session cookie and encrypting sensitive information on the database. You can generate a strong key using `openssl rand -base64 42`.
      SECRET_KEY: "${SECRET_KEY}"

      # The configurations of postgres database connection. It is consistent with the configuration in the 'db' service below.
      DB_USERNAME: "${DB_USERNAME}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_DATABASE: "${DB_DATABASE}"

      # The type of vector store to use. Supported values are `weaviate`, `qdrant`, `milvus`, `relyt`.
      # VECTOR_STORE: pgvector
      # PGVECTOR_USERNAME: "${PG_USERNAME}"
      # PGVECTOR_PASSWORD: "${PG_PASSWORD}"
      # PGVECTOR_HOST: "${PG_HOST}"
      # PGVECTOR_PORT: "${PG_PORT}"
      # PGVECTOR_DATABASE: "${PG_DATABASE}"

      VECTOR_STORE: qdrant
      # The Qdrant endpoint URL. Only available when VECTOR_STORE is `qdrant`.
      QDRANT_URL: ${QDRANT_URL:-https://80d8d659-3a51-4e49-ad33-5053c5236409.us-east4-0.gcp.cloud.qdrant.io:6333}
      # The Qdrant API key.
      QDRANT_API_KEY: ${QDRANT_API_KEY:-vnNkMSMp0fa1afptOn4C3A7QAvsgOwOHNGPntEr82KVnzr_antUcog}
      # The Qdrant client timeout setting.
      QDRANT_CLIENT_TIMEOUT: ${QDRANT_CLIENT_TIMEOUT:-}
      # The Qdrant client enable gRPC mode.
      QDRANT_GRPC_ENABLED: ${QDRANT_GRPC_ENABLED:-false}
      # The Qdrant server gRPC mode PORT.
      QDRANT_GRPC_PORT: ${QDRANT_GRPC_PORT:-6334}

      # The configurations of redis connection. It is consistent with the configuration in the 'redis' service below.
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_USERNAME: "${REDIS_USERNAME}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      REDIS_USE_SSL: 'false'
      REDIS_DB: 0 # use redis db 0 for redis cache
      CELERY_BROKER_URL: "redis://${REDIS_USERNAME}:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/1" # The configurations of celery broker. Use redis as the broker, and redis db 1 for celery broker.

      # object storage
      # STORAGE_TYPE: ${STORAGE_TYPE} # The type of storage to use for storing user files. Supported values are `local` and `s3` and `azure-blob` and `google-storage`, Default: `local`
      # STORAGE_LOCAL_PATH: storage   # The path to the local storage directory, the directory relative the root path of API service codes or absolute path. Default: `storage` or `/home/john/storage`. only available when STORAGE_TYPE is `local`.
      # S3_ENDPOINT: "${S3_ENDPOINT}"
      # S3_BUCKET_NAME: "${S3_BUCKET_NAME}"
      # S3_ACCESS_KEY: "${S3_ACCESS_KEY}"
      # S3_SECRET_KEY: "${S3_SECRET_KEY}"
      # S3_REGION: "${S3_REGION}"

      STORAGE_TYPE: supabase
      STORAGE_LOCAL_PATH: storage
      SUPABASE_BUCKET_NAME: ${SUPABASE_BUCKET_NAME:-mg-dify}
      # The api key to use for authenticating with the Supabase service.
      SUPABASE_API_KEY: ${SUPABASE_API_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9jamNubWdnbHNsYnV5cnZhc2FpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjkzMTcyMjksImV4cCI6MjA0NDg5MzIyOX0.f2cCBuM9cxjI1iU4ilIbyhgrBhH0b1gYnkqhfFG3ot0}
      # The project endpoint url of the Supabase service.
      SUPABASE_URL: ${SUPABASE_URL:-https://ocjcnmgglslbuyrvasai.supabase.co}

      #======================#
      # Misc API Optional
      #======================#
      CONSOLE_WEB_URL: ${CONSOLE_WEB_URL:-http://127.0.0.1:3000} # The base URL of console application web frontend, refers to the Console base URL of WEB service if console domain is different from api or web app domain. example: http://cloud.dify.ai
      INIT_PASSWORD: ''   # Password for admin user initialization. If left unset, admin user will not be prompted for a password when creating the initial admin account.
      CONSOLE_API_URL: ${CONSOLE_API_URL:-http://127.0.0.1:5001} # The base URL of console application api server, refers to the Console base URL of WEB service if console domain is different from api or web app domain. example: http://cloud.dify.ai
      SERVICE_API_URL: ${SERVICE_API_URL:-http://127.0.0.1:5001} # The URL prefix for Service API endpoints, refers to the base URL of the current API service if api domain is different from console domain. example: http://api.dify.ai
      APP_WEB_URL: ${APP_WEB_URL:-http://127.0.0.1:3000}     # The URL prefix for Web APP frontend, refers to the Web App base URL of WEB service if web app domain is different from console or api domain. example: http://udify.app
      FILES_URL: ''       # File preview or download Url prefix. used to display File preview or download Url to the front-end or as Multi-model inputs; Url is signed and has expiration time.
      FILES_ACCESS_TIMEOUT: 300  # File Access Time specifies a time interval in seconds for the file to be accessed. The default value is 300 seconds.
      MIGRATION_ENABLED: 'true'  # When enabled, migrations will be executed prior to application startup and the application will start after the migrations have completed.

      # SSRF Proxy server
      SSRF_PROXY_HTTP_URL: 'http://ssrf_proxy:3128'
      SSRF_PROXY_HTTPS_URL: 'http://ssrf_proxy:3128'
      WEB_API_CORS_ALLOW_ORIGINS: '*' # Specifies the allowed origins for cross-origin requests to the Web API, e.g. https://dify.app or * for all origins.
      CONSOLE_CORS_ALLOW_ORIGINS: '*' # Specifies the allowed origins for cross-origin requests to the console API, e.g. https://cloud.dify.ai or * for all origins.
      INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH: 1000 # Indexing configuration

      # Mail
      MAIL_TYPE: resend
      MAIL_DEFAULT_SEND_FROM: ${MAIL_DEFAULT_SEND_FROM:-george@meetgeorge.co.uk}
      RESEND_API_KEY: ${RESEND_API_KEY:-re_QmA5VJoq_PNXA6bVhdGfkdYufQ7qdGQen}
      RESEND_API_URL: ${RESEND_API_URL:-https://api.resend.com}

    volumes:
      - ./volumes/app/storage:/app/api/storage # Mount the storage directory to the container, for storing user files.
    ports: # uncomment to expose dify-api port to host
      - "5001:5001"
    networks:
      - ssrf_proxy_network
      - default

  #============================================================#
  # Worker Service
  #============================================================#
  worker: # The Celery worker for processing the queue.
    image: langgenius/dify-api:0.6.11
    restart: always
    environment:

      MODE: worker    # Startup mode, 'worker' starts the Celery worker for processing the queue.
      LOG_LEVEL: "${LOG_LEVEL}"   # The log level for the application. Supported values are `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`

      #======================#
      # Database Credentials #
      #======================#
      # A secret key that is used for securely signing the session cookie and encrypting sensitive information on the database. You can generate a strong key using `openssl rand -base64 42`.
      SECRET_KEY: "${SECRET_KEY}"

      # The configurations of postgres database connection. It is consistent with the configuration in the 'db' service below.
      DB_USERNAME: "${DB_USERNAME}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_DATABASE: "${DB_DATABASE}"

      # The type of vector store to use. Supported values are `weaviate`, `qdrant`, `milvus`, `relyt`.
      # VECTOR_STORE: pgvector
      # PGVECTOR_USERNAME: "${PG_USERNAME}"
      # PGVECTOR_PASSWORD: "${PG_PASSWORD}"
      # PGVECTOR_HOST: "${PG_HOST}"
      # PGVECTOR_PORT: "${PG_PORT}"
      # PGVECTOR_DATABASE: "${PG_DATABASE}"
      VECTOR_STORE: qdrant
      # The Qdrant endpoint URL. Only available when VECTOR_STORE is `qdrant`.
      QDRANT_URL: ${QDRANT_URL:-https://80d8d659-3a51-4e49-ad33-5053c5236409.us-east4-0.gcp.cloud.qdrant.io:6333}
      # The Qdrant API key.
      QDRANT_API_KEY: ${QDRANT_API_KEY:-vnNkMSMp0fa1afptOn4C3A7QAvsgOwOHNGPntEr82KVnzr_antUcog}
      # The Qdrant client timeout setting.
      QDRANT_CLIENT_TIMEOUT: ${QDRANT_CLIENT_TIMEOUT:-}
      # The Qdrant client enable gRPC mode.
      QDRANT_GRPC_ENABLED: ${QDRANT_GRPC_ENABLED:-false}
      # The Qdrant server gRPC mode PORT.
      QDRANT_GRPC_PORT: ${QDRANT_GRPC_PORT:-6334}

      # The configurations of redis connection. It is consistent with the configuration in the 'redis' service below.
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_USERNAME: "${REDIS_USERNAME}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      REDIS_USE_SSL: 'false'
      REDIS_DB: 0 # use redis db 0 for redis cache
      CELERY_BROKER_URL: "redis://${REDIS_USERNAME}:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/1" # The configurations of celery broker. Use redis as the broker, and redis db 1 for celery broker.

      # object storage
      # STORAGE_TYPE: ${STORAGE_TYPE} # The type of storage to use for storing user files. Supported values are `local` and `s3` and `azure-blob` and `google-storage`, Default: `local`
      # STORAGE_LOCAL_PATH: storage   # The path to the local storage directory, the directory relative the root path of API service codes or absolute path. Default: `storage` or `/home/john/storage`. only available when STORAGE_TYPE is `local`.
      # S3_ENDPOINT: "${S3_ENDPOINT}"
      # S3_BUCKET_NAME: "${S3_BUCKET_NAME}"
      # S3_ACCESS_KEY: "${S3_ACCESS_KEY}"
      # S3_SECRET_KEY: "${S3_SECRET_KEY}"
      # S3_REGION: "${S3_REGION}"

      STORAGE_TYPE: supabase
      STORAGE_LOCAL_PATH: storage
      SUPABASE_BUCKET_NAME: ${SUPABASE_BUCKET_NAME:-mg-dify}
      # The api key to use for authenticating with the Supabase service.
      SUPABASE_API_KEY: ${SUPABASE_API_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9jamNubWdnbHNsYnV5cnZhc2FpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjkzMTcyMjksImV4cCI6MjA0NDg5MzIyOX0.f2cCBuM9cxjI1iU4ilIbyhgrBhH0b1gYnkqhfFG3ot0}
      # The project endpoint url of the Supabase service.
      SUPABASE_URL: ${SUPABASE_URL:-https://ocjcnmgglslbuyrvasai.supabase.co}

      #======================#
      # Misc Worker Optional
      #======================#
      CONSOLE_WEB_URL: ${CONSOLE_WEB_URL:-http://127.0.0.1:3000}

      MAIL_TYPE: resend
      MAIL_DEFAULT_SEND_FROM: ${MAIL_DEFAULT_SEND_FROM:-george@meetgeorge.co.uk}
      RESEND_API_KEY: ${RESEND_API_KEY:-re_QmA5VJoq_PNXA6bVhdGfkdYufQ7qdGQen}
      RESEND_API_URL: ${RESEND_API_URL:-https://api.resend.com}

    volumes:
      - ./volumes/app/storage:/app/api/storage # Mount the storage directory to the container, for storing user files.
    networks:
      - ssrf_proxy_network
      - default

  #============================================================#
  # Frontend Web App
  #============================================================#
  web:
    image: langgenius/dify-web:0.6.11
    restart: always
    environment:
      CONSOLE_API_URL: ${CONSOLE_API_URL:-http://127.0.0.1:5001}  # The base URL of console application api server, refers to the Console base URL of WEB service if console domain is different from api or web app domain. example: http://cloud.dify.ai
      APP_API_URL: ${APP_API_URL:-http://127.0.0.1:5001}      # The URL for Web APP api server, refers to the Web App base URL of WEB service if web app domain is different from console or api domain. example: http://udify.app
      SENTRY_DSN: ''       # The DSN for Sentry error reporting. If not set, Sentry error reporting will be disabled.
    ports:               # uncomment to expose dify-web port to host
      - "3000:3000"

  sandbox:
    image: langgenius/dify-sandbox:0.2.10
    restart: always
    environment:
      # The DifySandbox configurations
      # Make sure you are changing this key for your deployment with a strong key.
      # You can generate a strong key using `openssl rand -base64 42`.
      API_KEY: ${SANDBOX_API_KEY:-dify-sandbox}
      GIN_MODE: ${SANDBOX_GIN_MODE:-release}
      WORKER_TIMEOUT: ${SANDBOX_WORKER_TIMEOUT:-15}
      ENABLE_NETWORK: ${SANDBOX_ENABLE_NETWORK:-true}
      HTTP_PROXY: ${SANDBOX_HTTP_PROXY:-http://ssrf_proxy:3128}
      HTTPS_PROXY: ${SANDBOX_HTTPS_PROXY:-http://ssrf_proxy:3128}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
    volumes:
      - ./volumes/sandbox/dependencies:/dependencies
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8194/health']
    networks:
      - ssrf_proxy_network

  #============================================================#
  # Access Layer
  #============================================================#
  # ssrf_proxy server
  # for more information, please refer to
  # https://docs.dify.ai/learn-more/faq/install-faq#id-18.-why-is-ssrf_proxy-needed
  ssrf_proxy:
    image: ubuntu/squid:latest
    restart: always
    volumes:
      - ./ssrf_proxy/squid.conf.template:/etc/squid/squid.conf.template
      - ./ssrf_proxy/docker-entrypoint.sh:/docker-entrypoint-mount.sh
    entrypoint:
      [
        'sh',
        '-c',
        "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh",
      ]
    environment:
      # pls clearly modify the squid env vars to fit your network environment.
      HTTP_PORT: ${SSRF_HTTP_PORT:-3128}
      COREDUMP_DIR: ${SSRF_COREDUMP_DIR:-/var/spool/squid}
      REVERSE_PROXY_PORT: ${SSRF_REVERSE_PROXY_PORT:-8194}
      SANDBOX_HOST: ${SSRF_SANDBOX_HOST:-sandbox}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
    networks:
      - ssrf_proxy_network
      - default

  # Certbot service
  # use `docker-compose --profile certbot up` to start the certbot service.
  certbot:
    image: certbot/certbot
    profiles:
      - certbot
    volumes:
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/html
      - ./volumes/certbot/logs:/var/log/letsencrypt
      - ./volumes/certbot/conf/live:/etc/letsencrypt/live
      - ./certbot/update-cert.template.txt:/update-cert.template.txt
      - ./certbot/docker-entrypoint.sh:/docker-entrypoint.sh
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
      - CERTBOT_DOMAIN=${CERTBOT_DOMAIN}
      - CERTBOT_OPTIONS=${CERTBOT_OPTIONS:-}
    entrypoint: ['/docker-entrypoint.sh']
    command: ['tail', '-f', '/dev/null']

  # The nginx reverse proxy.
  # used for reverse proxying the API service and Web service.
  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/proxy.conf.template:/etc/nginx/proxy.conf.template
      - ./nginx/https.conf.template:/etc/nginx/https.conf.template
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint-mount.sh
      - ./nginx/ssl:/etc/ssl # cert dir (legacy)
      - ./volumes/certbot/conf/live:/etc/letsencrypt/live # cert dir (with certbot container)
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/html
    entrypoint:
      [
        'sh',
        '-c',
        "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh",
      ]
    environment:
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME:-_}
      NGINX_HTTPS_ENABLED: ${NGINX_HTTPS_ENABLED:-false}
      NGINX_SSL_PORT: ${NGINX_SSL_PORT:-443}
      NGINX_PORT: ${NGINX_PORT:-80}
      # You're required to add your own SSL certificates/keys to the `./nginx/ssl` directory
      # and modify the env vars below in .env if HTTPS_ENABLED is true.
      NGINX_SSL_CERT_FILENAME: ${NGINX_SSL_CERT_FILENAME:-dify.crt}
      NGINX_SSL_CERT_KEY_FILENAME: ${NGINX_SSL_CERT_KEY_FILENAME:-dify.key}
      NGINX_SSL_PROTOCOLS: ${NGINX_SSL_PROTOCOLS:-TLSv1.1 TLSv1.2 TLSv1.3}
      NGINX_WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES:-auto}
      NGINX_CLIENT_MAX_BODY_SIZE: ${NGINX_CLIENT_MAX_BODY_SIZE:-15M}
      NGINX_KEEPALIVE_TIMEOUT: ${NGINX_KEEPALIVE_TIMEOUT:-65}
      NGINX_PROXY_READ_TIMEOUT: ${NGINX_PROXY_READ_TIMEOUT:-3600s}
      NGINX_PROXY_SEND_TIMEOUT: ${NGINX_PROXY_SEND_TIMEOUT:-3600s}
      NGINX_ENABLE_CERTBOT_CHALLENGE: ${NGINX_ENABLE_CERTBOT_CHALLENGE:-false}
      CERTBOT_DOMAIN: ${CERTBOT_DOMAIN:-}
    depends_on:
      - api
      - web
    ports:
      - '${EXPOSE_NGINX_PORT:-80}:${NGINX_PORT:-80}'
      - '${EXPOSE_NGINX_SSL_PORT:-443}:${NGINX_SSL_PORT:-443}'

  # The redis cache.
  redis:
    image: redis:6-alpine
    restart: always
    volumes:
      # Mount the redis data directory to the container.
      - ./volumes/redis/data:/data
    # Set the redis password when startup redis server.
    command: redis-server --requirepass ${REDIS_PASSWORD:-8Yo8nZvpFGV}
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']

#============================================================#
# Internal Network
#============================================================#
networks:
  ssrf_proxy_network: # create a network between sandbox, api and ssrf_proxy, and can not access outside.
    driver: bridge
    internal: true